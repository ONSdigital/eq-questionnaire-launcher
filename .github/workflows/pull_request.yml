name: PR

on:
  pull_request:
    branches:
      - main

jobs:
  build:
    permissions:
      contents: read
    runs-on: ubuntu-22.04
    steps:
      - name: Install Go
        uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
        with:
          go-version: "1.21.x"
          cache: false
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Cache dependencies
        id: cache-dependencies
        uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 # v4.2.0
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
      - name: Install dependencies
        if: steps.cache-dependencies.outputs.cache-hit != 'true'
        run: go get
      - name: Build
        run: CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo
  lint:
    permissions:
      contents: read
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
        with:
          go-version: '1.21'
          cache: false
      - name: Go linting
        uses: golangci/golangci-lint-action@2e788936b09dd82dc280e845628a40d2ba6b204c # v6.3.1
        with:
          version: v1.57
      - uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "npm"
      - name: Install npm deps
        run: npm install
      - name: Install Poetry
        uses: snok/install-poetry@76e04a911780d5b312d89783f7b1cd627778900a # v1.4.1
        with:
          version: 2.1.2
          virtualenvs-create: true
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'poetry'
      - name: Install virtual environment
        run: |
          sudo apt-get install libsnappy-dev
          poetry install
      - name: Templates linting
        run: make lint-templates
      - name: Static linting
        run: make lint-static
  docker-push:
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - id: auth
        name: Authenticate to Google Cloud
        uses: google-github-actions/auth@71f986410dfbc7added4569d411d040a91dc6935 # v2.1.8
        with:
          token_format: 'access_token'
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.SERVICE_ACCOUNT }}

      - name: Tag
        run: |
          CLEAN_TAG=$(echo "${{ github.event.pull_request.head.ref  }}"  | tr / -)
          echo "TAG=$CLEAN_TAG" >> $GITHUB_ENV
      - name: Build
        run: docker build -t ${{ secrets.GAR_LOCATION }}/${{ secrets.GAR_PROJECT_ID }}/docker-images/eq-questionnaire-launcher:$TAG .

      - name: Push to GAR
        run: |
          gcloud auth configure-docker ${{ secrets.GAR_LOCATION }}
          echo "Pushing to GAR with tag $TAG"
          docker push ${{ secrets.GAR_LOCATION }}/${{ secrets.GAR_PROJECT_ID }}/docker-images/eq-questionnaire-launcher:$TAG
